{
  "name": "multi-channel-mdm",
  "version": "0.5.0",
  "description": "Create multiple channels using mdm",
  "keywords": [],
  "author": {
    "name": "Raynos",
    "email": "raynos2@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/Raynos/multi-channel-mdm.git"
  },
  "main": "index",
  "homepage": "https://github.com/Raynos/multi-channel-mdm",
  "contributors": [
    {
      "name": "Jake Verbaten"
    }
  ],
  "bugs": {
    "url": "https://github.com/Raynos/multi-channel-mdm/issues",
    "email": "raynos2@gmail.com"
  },
  "dependencies": {
    "through": "~0.1.2",
    "memory-store": "0.0.1",
    "ap": "~0.1.0",
    "pause-stream": "0.0.3",
    "stream-store": "0.0.1"
  },
  "devDependencies": {
    "mux-demux": "~1.1.0",
    "routes": "~0.1.1",
    "browserify": "~1.14.5",
    "boot": "~0.5.0",
    "redis-stream-store": "~0.3.1",
    "mux-demux-net": "0.0.2",
    "stream-router": "0.0.2",
    "browserify-server": "~0.2.0"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/Raynos/multi-channel-mdm/raw/master/LICENSE"
    }
  ],
  "readme": "# multi-channel-mdm\n\nCreate multiple channels using mux-demux\n\n## Example server\n\n    var MultiChannel = require(\"multi-channel-mdm\")\n        , net = require(\"net\")\n        , MuxDemux = require(\"mux-demux\")\n        , channel = MultiChannel()\n\n    net.createServer(function (con) {\n        var mdm = MuxDemux({\n                error: false\n            })\n\n        mdm.on(\"connection\", function (stream) {\n            channel(stream, {\n                streamName: stream.meta\n            })\n        })\n        \n        con.pipe(mdm).pipe(con)\n    }).listen(8642)\n\n## Example client\n\n    var net = require(\"net\")\n        , MuxDemux = require(\"mux-demux\")\n        , mdm = MuxDemux()\n        , con = net.connect(8642)\n\n    mdm.pipe(con).pipe(mdm)\n\n    var room1 = mdm.createStream(\"room1\")\n        , room2 = mdm.createStream(\"room2\")\n\n    room1.on(\"data\", console.log.bind(console, \"room1\"))\n    room2.on(\"data\", console.log.bind(console, \"room2\"))\n\n    room1.write(\"hello\")\n    room2.write(\"world\")\n\n## Example server using a router\n\nmulti channel was created to interact nicely with the routes router. Notice how you can also pass a persistance store directly to multi channel so you have control over how the streamName to stream mapping occurs\n\n    var multiChannel = require(\"multi-channel-mdm\")\n        , net = require(\"net\")\n        , MuxDemux = require(\"mux-demux\")\n        , streamStore = require(\"memory-store\").createStore()\n        , Router = require(\"routes\").Router\n        , router = new Router()\n\n    router.addRoute(\"/channel/:streamName\", multiChannel(streamStore))\n\n    net.createServer(function (con) {\n        var mdm = MuxDemux({\n            error: false\n        })\n        mdm.on(\"connection\", function (stream) {\n            var route = router.match(stream.meta)\n\n            if (route.fn) {\n                route.fn(stream, route.params)\n            }\n\n            stream.on(\"error\", function (err) {\n                console.log(\"error occurred!\", err.message)\n                stream.end()\n            })\n        })\n        con.pipe(mdm).pipe(con)\n    }).listen(8642)\n\n## Installation\n\n`npm install multi-channel-mdm`\n\n## Contributors\n\n - Raynos\n\n## MIT Licenced\n\n  [1]: https://secure.travis-ci.org/Raynos/multi-channel-shoe.png\n  [2]: http://travis-ci.org/Raynos/multi-channel-shoe",
  "_id": "multi-channel-mdm@0.5.0",
  "_from": "multi-channel-mdm@~0.5.0"
}
