{
  "name": "backoff",
  "description": "Exponential and Fibonacci backoffs.",
  "version": "0.2.1",
  "author": {
    "name": "Mathieu Turcotte",
    "email": "turcotte.mat@gmail.com"
  },
  "keywords": [
    "backoff",
    "fibonacci",
    "exponential"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/MathieuTurcotte/node-backoff.git"
  },
  "devDependencies": {
    "sinon": "1.4",
    "nodeunit": "0.7",
    "jshint": "0.7"
  },
  "scripts": {
    "pretest": "node_modules/jshint/bin/hint lib/*.js lib/strategy/*.js tests/*.js",
    "test": "node_modules/nodeunit/bin/nodeunit tests/"
  },
  "engines": {
    "node": ">= 0.6"
  },
  "readme": "# Backoff for Node.js [![Build Status](https://secure.travis-ci.org/MathieuTurcotte/node-backoff.png?branch=master)](http://travis-ci.org/MathieuTurcotte/node-backoff)\n\nBackoff implementation for Node.js.\n\n## Installation\n\n```\nnpm install backoff\n```\n## Usage\n\nIn order to use backoff, require `backoff`.\n\n```js\nvar backoff = require('backoff');\n```\n\nThe usual way to instantiate a new `Backoff` object is to use one predefined\nfactory method: `backoff.fibonacci([options])`, `backoff.exponential([options])`.\n\n`Backoff` inherits from `EventEmitter`. One can listen for backoff completion\nby listening for `backoff` events. Registered handlers will be called with the\ncurrent backoff number and delay.\n\n``` js\nvar fibonacciBackoff = backoff.fibonacci({\n    initialDelay: 10,\n    maxDelay: 1000\n});\n\nfibonacciBackoff.on('backoff', function(number, delay) {\n    console.log(number + ' ' + delay + 'ms');\n\n    if (number < 15) {\n        fibonacciBackoff.backoff();\n    }\n});\n\nfibonacciBackoff.backoff();\n```\n\nThe previous example would print:\n\n```\n0 10ms\n1 10ms\n2 20ms\n3 30ms\n4 50ms\n5 80ms\n6 130ms\n7 210ms\n8 340ms\n9 550ms\n10 890ms\n11 1000ms\n12 1000ms\n13 1000ms\n14 1000ms\n15 1000ms\n```\n\nBackoff objects are meant to be instantiated once and reused several times\nby calling `reset` after each successful backoff operation.\n\n## API\n\n### backoff.exponential([options])\n\nConstructs an exponential backoff (10, 20, 40, 80, etc.).\n\n`options` is an object with the following defaults:\n\n```js\noptions = {\n    randomisationFactor: 0,\n    initialDelay: 100,\n    maxDelay: 10000\n};\n```\n\nWith these values, the backoff delay will increase from 100ms to 10000ms. The\nrandomisation factor controls the range of randomness and must be between 0\nand 1. By default, no randomisation is applied on the backoff delay.\n\n### backoff.fibonacci([options])\n\nConstructs a Fibonacci backoff (10, 10, 20, 30, 50, etc.).\n\nThe Fibonacci backoff has the same set of options as the exponential backoff.\n\n### Class Backoff\n\n#### new Backoff(strategy)\n\n- strategy: the backoff strategy to use\n\nConstructs a new backoff object from a specific backoff strategy. The backoff\nstrategy must implement the `BackoffStrategy` interface defined bellow.\n\n#### backoff.backoff()\n\nStarts a backoff operation. Will throw an error if a backoff operation is\nalready in progress.\n\nIn practice, this method should be called after a failed attempt to perform a\nsensitive operation (connecting to a database, downloading a resource over the\nnetwork, etc.).\n\n#### backoff.reset()\n\nResets the backoff delay to the initial backoff delay and stop any backoff\noperation in progress. After reset, a backoff instance can and should be\nreused.\n\nIn practice, this method should be called after having successfully completed\nthe sensitive operation guarded by the backoff instance or if the client code\nrequest to stop any reconnection attempt.\n\n#### Event: 'backoff'\n\n- number: number of backoff since last reset\n- delay: current backoff delay\n\nEmitted on backoff completion, effectively signaling that the failing operation\nshould be retried.\n\n### Interface BackoffStrategy\n\nA backoff strategy must provide the following methods.\n\n#### strategy.next()\n\nComputes and returns the next backoff delay.\n\n#### strategy.reset()\n\nReset the backoff delay to its initial value.\n\n## License\n\nThis code is free to use under the terms of the [MIT license](http://mturcotte.mit-license.org/).\n",
  "_id": "backoff@0.2.1",
  "_from": "backoff@~0.2.0"
}
