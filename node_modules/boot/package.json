{
  "name": "boot",
  "version": "0.7.1",
  "description": "An automatic reconnect mux-demux-shoe",
  "keywords": [],
  "author": {
    "name": "Raynos",
    "email": "raynos2@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/Raynos/boot.git"
  },
  "main": "index",
  "homepage": "https://github.com/Raynos/boot",
  "browserify": "browser.js",
  "contributors": [
    {
      "name": "Jake Verbaten"
    }
  ],
  "bugs": {
    "url": "https://github.com/Raynos/boot/issues",
    "email": "raynos2@gmail.com"
  },
  "dependencies": {
    "mux-demux-shoe": "~0.2.0",
    "through": "~0.1.2",
    "pause-stream": "0.0.3",
    "backoff": "~0.2.0",
    "duplexer": "0.0.1"
  },
  "devDependencies": {
    "upnode": "~0.4.1",
    "node-uuid": "~1.3.3",
    "browserify-server": "~0.2.0",
    "multi-channel-mdm": "~0.5.0",
    "lazynode": "~0.1.0"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/Raynos/boot/raw/master/LICENSE"
    }
  ],
  "scripts": {},
  "readme": "# boot\n\nAn automatic reconnect mux-demux-shoe\n\nThe mdm connection you get from shoe will magically handle reconnection\nlogic for you under the hood. You just play with streams\n\n## Client Example\n\n``` js\nvar boot = require('boot')\n    , mdm = boot(\"/boot\")\n\nvar one = mdm.createStream(\"one\")\n\none.on(\"data\", console.log.bind(console, \"client\"))\n\none.write(\"hello world\")\n```\n\n## Server Example\n\n``` js\nvar boot = require(\"boot\")\n    , through = require(\"through\")\n    , echoStream = through()\n\nvar sock = boot(function (stream) {\n    // stream from MuxDemux with the meta property set\n    if (stream.meta === \"one\") {\n        stream.on(\"data\", console.log.bind(console, \"server\"))\n        stream.pipe(echoStream, { end: false }).pipe(stream)\n    }\n})\n\nsock.install(server, \"/boot\")\n```\n\n## Installation\n\n`npm install boot`\n\n## Contributors\n\n - Raynos\n\n## MIT Licenced\n\n  [1]: https://secure.travis-ci.org/Raynos/boot.png\n  [2]: http://travis-ci.org/Raynos/boot",
  "_id": "boot@0.7.1",
  "dist": {
    "shasum": "44a7ba72273349f66f7c638e02e9538cddd005eb"
  },
  "_from": "boot@0.7.1"
}
